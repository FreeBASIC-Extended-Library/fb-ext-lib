''Copyright (c) 2007-2011, FreeBASIC Extended Library Development Group
''
''All rights reserved.
''
''Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
''
''    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
''    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
''    * Neither the name of the FreeBASIC Extended Library Development Group nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
''
''THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
''"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
''LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
''A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
''CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
''EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
''PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
''PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
''LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
''NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
''SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include once "ext/xml/xpath.bi"

fbext_Instanciate( fbExt_List, ((xml)(node)) )

namespace ext.xml

public function xpath( byval DOM as xml.tree ptr, byref xpathstr as string ) as XMLNodeList ptr

    return 0

end function

private function scanall_element( byval curnode as node ptr, byref elname as string, byval xlist as XMLNodeList ptr = 0 ) as XMLNodeList ptr

    dim x as XMLNodeList ptr
    if xlist = 0 then
        x = new XMLNodeList
    else
        x = xlist
    end if

    if curnode->tag = elname then x->PushBack( *curnode )

    if curnode->children <> 0 then

        for n as integer = 0 to curnode->children - 1
            scanall_element( curnode->child(0), elname, x )
        next

    end if

    return x

end function

private function scanall_attr( byval curnode as node ptr, byref atrname as string, byval xlist as XMLNodeList ptr = 0 ) as XMLNodeList ptr

    dim x as XMLNodeList ptr
    if xlist = 0 then
        x = new XMLNodeList
    else
        x = xlist
    end if

    if curnode->attribute(atrname) <> "" then x->PushBack( *curnode )

    if curnode->children <> 0 then

        for n as integer = 0 to curnode->children - 1
            scanall_attr( curnode->child(0), atrname, x )
        next

    end if

    return x

end function

private function scanlist_attr( byval xlist as XMLNodeList ptr, byref atrname as string, byref atrvalue as string = "" ) as XMLNodeList ptr

    var x = new XMLNodeList

    var iter = xlist.Begin()

    while iter <> xlist.End_()

        var curnode = *iter.Get()
        if atrvalue <> "" then
            if curnode.attribute(atrname) = atrvalue then x->PushBack( curnode )
        else
            if curnode.attribute(atrname) <> "" then x->PushBack( curnode )
        end if
        iter.Increment

    wend

    return x

end function

end namespace
